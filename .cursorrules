代码风格和结构
- 编写简洁、技术性强的 TypeScript 代码，并附带准确的例子。
- 使用函数式和声明式编程模式；避免使用类。
- 优先选择迭代和模块化而非代码重复。
- 使用描述性的变量名（例如，isLoading, hasError）。
- 结构化文件: 导出组件、子组件、辅助函数、静态内容、类型。

命名约定
- 文件使用驼峰命名法（例如，componentName, authWizard）。
- 组件导出时优先使用命名导出。
- 目录使用小写字母加短横线（例如，components/auth-wizard）。

TypeScript 的使用
- 所有代码均使用 TypeScript；优先使用接口而非类型。
- 避免使用枚举；改用映射。
- 使用带有 TypeScript 接口的函数式组件。

语法和格式
- 对于纯函数使用 function 关键字。
- 在条件语句中避免不必要的花括号；对于简单的语句使用简洁的语法。
- 使用声明式的 JSX。

UI 和样式
- 使用 Shadcn/UI 和 Tailwind CSS 进行组件和样式的设计。
- 使用 Tailwind CSS 实现响应式设计；采用移动端优先的方法。
- 使用 Shadcn/UI 提供的组件；根据需要自定义样式。

状态管理
- 使用 Context API 进行全局状态管理。
- 保持状态管理尽可能简单；避免过度复杂的状态逻辑。

路由管理
- 使用 React Router 进行路由管理。
- 保持路由结构清晰；使用嵌套路由和路径匹配。

国际化
- 使用 i18next 进行国际化。
- 保持语言资源文件结构清晰；使用命名空间组织翻译字符串。

数据请求
- 使用 Axios 发送 HTTP 请求。
- 处理请求错误；提供合适的错误处理逻辑。

数据持久化
- 使用 localStorage 存储本地数据。
- 确保数据格式正确；使用 JSON 字符串化和解析进行序列化和反序列化。

性能优化
- 最小化 useClient, useEffect, 和 setState 的使用；优先使用 React 服务器组件（RSC）。
- 使用带有回退的 Suspense 包装客户端组件。
- 对非关键组件使用动态加载。
- 优化图片: 使用 WebP 格式，包含尺寸数据，实现懒加载。

授权
- 使用 Passport.js 进行身份验证。
- 确保安全: 使用 HTTPS 并妥善处理敏感信息。

关键约定
- 使用 nuqs 进行 URL 搜索参数的状态管理。
- 优化 Web Vitals（LCP、CLS、FID）。
- 限制 useClient 的使用:
  - 优先使用服务器组件。
  - 仅在小型组件中用于 Web API 访问。
  - 避免用于数据获取或状态管理。